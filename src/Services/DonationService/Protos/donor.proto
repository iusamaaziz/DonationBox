syntax = "proto3";

option csharp_namespace = "DonorService.Grpc";

package donor;

// Donor service for managing donors and their organizations
service DonorService {
  // Get donor profile by user ID
  rpc GetDonor(GetDonorRequest) returns (GetDonorResponse);

  // Create or update donor profile
  rpc CreateDonor(CreateDonorRequest) returns (CreateDonorResponse);

  // Get organizations for a donor
  rpc GetDonorOrganizations(GetDonorOrganizationsRequest) returns (GetDonorOrganizationsResponse);

  // Create a new welfare organization
  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse);

  // Get organization details
  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse);

  // Update organization details
  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse);

  // Get all organizations (for donation service)
  rpc GetAllOrganizations(GetAllOrganizationsRequest) returns (GetAllOrganizationsResponse);

  // Check if user is authorized to manage organization
  rpc ValidateOrganizationAccess(ValidateOrganizationAccessRequest) returns (ValidateOrganizationAccessResponse);
}

// Request to get donor by user ID
message GetDonorRequest {
  string user_id = 1;
}

// Response with donor information
message GetDonorResponse {
  bool found = 1;
  Donor donor = 2;
  string error_message = 3;
}

// Request to create donor profile
message CreateDonorRequest {
  string user_id = 1;
  string bio = 2;
  repeated string interests = 3;
  string phone_number = 4;
  string address = 5;
}

// Response for donor creation
message CreateDonorResponse {
  bool success = 1;
  Donor donor = 2;
  string error_message = 3;
}

// Donor information
message Donor {
  string user_id = 1;
  string bio = 2;
  repeated string interests = 3;
  string phone_number = 4;
  string address = 5;
  bool is_active = 6;
  int64 created_at = 7;
  int64 updated_at = 8;
}

// Request to get donor's organizations
message GetDonorOrganizationsRequest {
  string user_id = 1;
}

// Response with donor's organizations
message GetDonorOrganizationsResponse {
  repeated Organization organizations = 1;
  string error_message = 2;
}

// Request to create organization
message CreateOrganizationRequest {
  string name = 1;
  string description = 2;
  string type = 3; // CHARITY, FOUNDATION, COMMUNITY, etc.
  string mission = 4;
  string website_url = 5;
  string contact_email = 6;
  string contact_phone = 7;
  string address = 8;
  string tax_id = 9;
  string created_by_user_id = 10;
}

// Response for organization creation
message CreateOrganizationResponse {
  bool success = 1;
  Organization organization = 2;
  string error_message = 3;
}

// Request to get organization
message GetOrganizationRequest {
  string organization_id = 1;
}

// Response with organization details
message GetOrganizationResponse {
  bool found = 1;
  Organization organization = 2;
  string error_message = 3;
}

// Request to update organization
message UpdateOrganizationRequest {
  string organization_id = 1;
  string name = 2;
  string description = 3;
  string type = 4;
  string mission = 5;
  string website_url = 6;
  string contact_email = 7;
  string contact_phone = 8;
  string address = 9;
  string tax_id = 10;
  string updated_by_user_id = 11;
}

// Response for organization update
message UpdateOrganizationResponse {
  bool success = 1;
  Organization organization = 2;
  string error_message = 3;
}

// Organization information
message Organization {
  string id = 1;
  string name = 2;
  string description = 3;
  string type = 4;
  string mission = 5;
  string website_url = 6;
  string contact_email = 7;
  string contact_phone = 8;
  string address = 9;
  string tax_id = 10;
  string created_by_user_id = 11;
  bool is_verified = 12;
  bool is_active = 13;
  int64 created_at = 14;
  int64 updated_at = 15;
}

// Request to get all organizations
message GetAllOrganizationsRequest {
  int32 page = 1;
  int32 page_size = 2;
  string filter_type = 3; // Optional filter by organization type
}

// Response with all organizations
message GetAllOrganizationsResponse {
  repeated Organization organizations = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 page_size = 4;
  string error_message = 5;
}

// Request to validate organization access
message ValidateOrganizationAccessRequest {
  string organization_id = 1;
  string user_id = 2;
}

// Response for organization access validation
message ValidateOrganizationAccessResponse {
  bool has_access = 1;
  string error_message = 2;
}
